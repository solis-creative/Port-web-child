{"ast":null,"code":"/**\n * jQuery Ripples plugin v0.6.2 / https://github.com/sirxemic/jquery.ripples\n * MIT License\n * @author sirxemic / https://sirxemic.com/\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('jquery')) : typeof define === 'function' && define.amd ? define(['jquery'], factory) : factory(global.$);\n})(this, function ($) {\n  'use strict';\n\n  $ = $ && 'default' in $ ? $['default'] : $;\n  var gl;\n  var $window = $(window); // There is only one window, so why not cache the jQuery-wrapped window?\n\n  function isPercentage(str) {\n    return str[str.length - 1] == '%';\n  }\n  /**\r\n   *  Load a configuration of GL settings which the browser supports.\r\n   *  For example:\r\n   *  - not all browsers support WebGL\r\n   *  - not all browsers support floating point textures\r\n   *  - not all browsers support linear filtering for floating point textures\r\n   *  - not all browsers support rendering to floating point textures\r\n   *  - some browsers *do* support rendering to half-floating point textures instead.\r\n   */\n\n\n  function loadConfig() {\n    var canvas = document.createElement('canvas');\n    gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n\n    if (!gl) {\n      // Browser does not support WebGL.\n      return null;\n    } // Load extensions\n\n\n    var extensions = {};\n    ['OES_texture_float', 'OES_texture_half_float', 'OES_texture_float_linear', 'OES_texture_half_float_linear'].forEach(function (name) {\n      var extension = gl.getExtension(name);\n\n      if (extension) {\n        extensions[name] = extension;\n      }\n    }); // If no floating point extensions are supported we can bail out early.\n\n    if (!extensions.OES_texture_float) {\n      return null;\n    }\n\n    var configs = [];\n\n    function createConfig(type, glType, arrayType) {\n      var name = 'OES_texture_' + type,\n          nameLinear = name + '_linear',\n          linearSupport = nameLinear in extensions,\n          configExtensions = [name];\n\n      if (linearSupport) {\n        configExtensions.push(nameLinear);\n      }\n\n      return {\n        type: glType,\n        arrayType: arrayType,\n        linearSupport: linearSupport,\n        extensions: configExtensions\n      };\n    }\n\n    configs.push(createConfig('float', gl.FLOAT, Float32Array));\n\n    if (extensions.OES_texture_half_float) {\n      configs.push( // Array type should be Uint16Array, but at least on iOS that breaks. In that case we\n      // just initialize the textures with data=null, instead of data=new Uint16Array(...).\n      // This makes initialization a tad slower, but it's still negligible.\n      createConfig('half_float', extensions.OES_texture_half_float.HALF_FLOAT_OES, null));\n    } // Setup the texture and framebuffer\n\n\n    var texture = gl.createTexture();\n    var framebuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); // Check for each supported texture type if rendering to it is supported\n\n    var config = null;\n\n    for (var i = 0; i < configs.length; i++) {\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 32, 32, 0, gl.RGBA, configs[i].type, null);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE) {\n        config = configs[i];\n        break;\n      }\n    }\n\n    return config;\n  }\n\n  function createImageData(width, height) {\n    try {\n      return new ImageData(width, height);\n    } catch (e) {\n      // Fallback for IE\n      var canvas = document.createElement('canvas');\n      return canvas.getContext('2d').createImageData(width, height);\n    }\n  }\n\n  function translateBackgroundPosition(value) {\n    var parts = value.split(' ');\n\n    if (parts.length === 1) {\n      switch (value) {\n        case 'center':\n          return ['50%', '50%'];\n\n        case 'top':\n          return ['50%', '0'];\n\n        case 'bottom':\n          return ['50%', '100%'];\n\n        case 'left':\n          return ['0', '50%'];\n\n        case 'right':\n          return ['100%', '50%'];\n\n        default:\n          return [value, '50%'];\n      }\n    } else {\n      return parts.map(function (part) {\n        switch (value) {\n          case 'center':\n            return '50%';\n\n          case 'top':\n          case 'left':\n            return '0';\n\n          case 'right':\n          case 'bottom':\n            return '100%';\n\n          default:\n            return part;\n        }\n      });\n    }\n  }\n\n  function createProgram(vertexSource, fragmentSource, uniformValues) {\n    function compileSource(type, source) {\n      var shader = gl.createShader(type);\n      gl.shaderSource(shader, source);\n      gl.compileShader(shader);\n\n      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        throw new Error('compile error: ' + gl.getShaderInfoLog(shader));\n      }\n\n      return shader;\n    }\n\n    var program = {};\n    program.id = gl.createProgram();\n    gl.attachShader(program.id, compileSource(gl.VERTEX_SHADER, vertexSource));\n    gl.attachShader(program.id, compileSource(gl.FRAGMENT_SHADER, fragmentSource));\n    gl.linkProgram(program.id);\n\n    if (!gl.getProgramParameter(program.id, gl.LINK_STATUS)) {\n      throw new Error('link error: ' + gl.getProgramInfoLog(program.id));\n    } // Fetch the uniform and attribute locations\n\n\n    program.uniforms = {};\n    program.locations = {};\n    gl.useProgram(program.id);\n    gl.enableVertexAttribArray(0);\n    var match,\n        name,\n        regex = /uniform (\\w+) (\\w+)/g,\n        shaderCode = vertexSource + fragmentSource;\n\n    while ((match = regex.exec(shaderCode)) != null) {\n      name = match[2];\n      program.locations[name] = gl.getUniformLocation(program.id, name);\n    }\n\n    return program;\n  }\n\n  function bindTexture(texture, unit) {\n    gl.activeTexture(gl.TEXTURE0 + (unit || 0));\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n  }\n\n  function extractUrl(value) {\n    var urlMatch = /url\\([\"']?([^\"']*)[\"']?\\)/.exec(value);\n\n    if (urlMatch == null) {\n      return null;\n    }\n\n    return urlMatch[1];\n  }\n\n  function isDataUri(url) {\n    return url.match(/^data:/);\n  }\n\n  var config = loadConfig();\n  var transparentPixels = createImageData(32, 32); // Extend the css\n\n  $('head').prepend('<style>.jquery-ripples { position: relative; z-index: 0; }</style>'); // RIPPLES CLASS DEFINITION\n  // =========================\n\n  var Ripples = function Ripples(el, options) {\n    var that = this;\n    this.$el = $(el); // Init properties from options\n\n    this.interactive = options.interactive;\n    this.resolution = options.resolution;\n    this.textureDelta = new Float32Array([1 / this.resolution, 1 / this.resolution]);\n    this.perturbance = options.perturbance;\n    this.dropRadius = options.dropRadius;\n    this.crossOrigin = options.crossOrigin;\n    this.imageUrl = options.imageUrl; // Init WebGL canvas\n\n    var canvas = document.createElement('canvas');\n    canvas.width = this.$el.innerWidth();\n    canvas.height = this.$el.innerHeight();\n    this.canvas = canvas;\n    this.$canvas = $(canvas);\n    this.$canvas.css({\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      zIndex: -1\n    });\n    this.$el.addClass('jquery-ripples').append(canvas);\n    this.context = gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl'); // Load extensions\n\n    config.extensions.forEach(function (name) {\n      gl.getExtension(name);\n    }); // Auto-resize when window size changes.\n\n    $(window).on('resize', function () {\n      that.updateSize();\n    }); // Init rendertargets for ripple data.\n\n    this.textures = [];\n    this.framebuffers = [];\n    this.bufferWriteIndex = 0;\n    this.bufferReadIndex = 1;\n    var arrayType = config.arrayType;\n    var textureData = arrayType ? new arrayType(this.resolution * this.resolution * 4) : null;\n\n    for (var i = 0; i < 2; i++) {\n      var texture = gl.createTexture();\n      var framebuffer = gl.createFramebuffer();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, config.linearSupport ? gl.LINEAR : gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, config.linearSupport ? gl.LINEAR : gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.resolution, this.resolution, 0, gl.RGBA, config.type, textureData);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n      this.textures.push(texture);\n      this.framebuffers.push(framebuffer);\n    } // Init GL stuff\n\n\n    this.quad = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.quad);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, +1, -1, +1, +1, -1, +1]), gl.STATIC_DRAW);\n    this.initShaders();\n    this.initTexture();\n    this.setTransparentTexture(); // Load the image either from the options or CSS rules\n\n    this.loadImage(); // Set correct clear color and blend mode (regular alpha blending)\n\n    gl.clearColor(0, 0, 0, 0);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); // Plugin is successfully initialized!\n\n    this.visible = true;\n    this.running = true;\n    this.inited = true;\n    this.destroyed = false;\n    this.setupPointerEvents(); // Init animation\n\n    function step() {\n      if (!that.destroyed) {\n        that.step();\n        requestAnimationFrame(step);\n      }\n    }\n\n    requestAnimationFrame(step);\n  };\n\n  Ripples.DEFAULTS = {\n    imageUrl: null,\n    resolution: 256,\n    dropRadius: 20,\n    perturbance: 0.03,\n    interactive: true,\n    crossOrigin: ''\n  };\n  Ripples.prototype = {\n    // Set up pointer (mouse + touch) events\n    setupPointerEvents: function setupPointerEvents() {\n      var that = this;\n\n      function pointerEventsEnabled() {\n        return that.visible && that.running && that.interactive;\n      }\n\n      function dropAtPointer(pointer, big) {\n        if (pointerEventsEnabled()) {\n          that.dropAtPointer(pointer, that.dropRadius * (big ? 1.5 : 1), big ? 0.14 : 0.01);\n        }\n      } // Start listening to pointer events\n\n\n      this.$el // Create regular, small ripples for mouse move and touch events...\n      .on('mousemove.ripples', function (e) {\n        dropAtPointer(e);\n      }).on('touchmove.ripples, touchstart.ripples', function (e) {\n        var touches = e.originalEvent.changedTouches;\n\n        for (var i = 0; i < touches.length; i++) {\n          dropAtPointer(touches[i]);\n        }\n      }) // ...and only a big ripple on mouse down events.\n      .on('mousedown.ripples', function (e) {\n        dropAtPointer(e, true);\n      });\n    },\n    // Load the image either from the options or the element's CSS rules.\n    loadImage: function loadImage() {\n      var that = this;\n      gl = this.context;\n      var newImageSource = this.imageUrl || extractUrl(this.originalCssBackgroundImage) || extractUrl(this.$el.css('backgroundImage')); // If image source is unchanged, don't reload it.\n\n      if (newImageSource == this.imageSource) {\n        return;\n      }\n\n      this.imageSource = newImageSource; // Falsy source means no background.\n\n      if (!this.imageSource) {\n        this.setTransparentTexture();\n        return;\n      } // Load the texture from a new image.\n\n\n      var image = new Image();\n\n      image.onload = function () {\n        gl = that.context; // Only textures with dimensions of powers of two can have repeat wrapping.\n\n        function isPowerOfTwo(x) {\n          return (x & x - 1) == 0;\n        }\n\n        var wrapping = isPowerOfTwo(image.width) && isPowerOfTwo(image.height) ? gl.REPEAT : gl.CLAMP_TO_EDGE;\n        gl.bindTexture(gl.TEXTURE_2D, that.backgroundTexture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapping);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapping);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n        that.backgroundWidth = image.width;\n        that.backgroundHeight = image.height; // Hide the background that we're replacing.\n\n        that.hideCssBackground();\n      }; // Fall back to a transparent texture when loading the image failed.\n\n\n      image.onerror = function () {\n        gl = that.context;\n        that.setTransparentTexture();\n      }; // Disable CORS when the image source is a data URI.\n\n\n      image.crossOrigin = isDataUri(this.imageSource) ? null : this.crossOrigin;\n      image.src = this.imageSource;\n    },\n    step: function step() {\n      gl = this.context;\n\n      if (!this.visible) {\n        return;\n      }\n\n      this.computeTextureBoundaries();\n\n      if (this.running) {\n        this.update();\n      }\n\n      this.render();\n    },\n    drawQuad: function drawQuad() {\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.quad);\n      gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n      gl.drawArrays(gl.TRIANGLE_FAN, 0, 4);\n    },\n    render: function render() {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n      gl.enable(gl.BLEND);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      gl.useProgram(this.renderProgram.id);\n      bindTexture(this.backgroundTexture, 0);\n      bindTexture(this.textures[0], 1);\n      gl.uniform1f(this.renderProgram.locations.perturbance, this.perturbance);\n      gl.uniform2fv(this.renderProgram.locations.topLeft, this.renderProgram.uniforms.topLeft);\n      gl.uniform2fv(this.renderProgram.locations.bottomRight, this.renderProgram.uniforms.bottomRight);\n      gl.uniform2fv(this.renderProgram.locations.containerRatio, this.renderProgram.uniforms.containerRatio);\n      gl.uniform1i(this.renderProgram.locations.samplerBackground, 0);\n      gl.uniform1i(this.renderProgram.locations.samplerRipples, 1);\n      this.drawQuad();\n      gl.disable(gl.BLEND);\n    },\n    update: function update() {\n      gl.viewport(0, 0, this.resolution, this.resolution);\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffers[this.bufferWriteIndex]);\n      bindTexture(this.textures[this.bufferReadIndex]);\n      gl.useProgram(this.updateProgram.id);\n      this.drawQuad();\n      this.swapBufferIndices();\n    },\n    swapBufferIndices: function swapBufferIndices() {\n      this.bufferWriteIndex = 1 - this.bufferWriteIndex;\n      this.bufferReadIndex = 1 - this.bufferReadIndex;\n    },\n    computeTextureBoundaries: function computeTextureBoundaries() {\n      var backgroundSize = this.$el.css('background-size');\n      var backgroundAttachment = this.$el.css('background-attachment');\n      var backgroundPosition = translateBackgroundPosition(this.$el.css('background-position')); // Here the 'container' is the element which the background adapts to\n      // (either the chrome window or some element, depending on attachment)\n\n      var container;\n\n      if (backgroundAttachment == 'fixed') {\n        container = {\n          left: window.pageXOffset,\n          top: window.pageYOffset\n        };\n        container.width = $window.width();\n        container.height = $window.height();\n      } else {\n        container = this.$el.offset();\n        container.width = this.$el.innerWidth();\n        container.height = this.$el.innerHeight();\n      } // TODO: background-clip\n\n\n      if (backgroundSize == 'cover') {\n        var scale = Math.max(container.width / this.backgroundWidth, container.height / this.backgroundHeight);\n        var backgroundWidth = this.backgroundWidth * scale;\n        var backgroundHeight = this.backgroundHeight * scale;\n      } else if (backgroundSize == 'contain') {\n        var scale = Math.min(container.width / this.backgroundWidth, container.height / this.backgroundHeight);\n        var backgroundWidth = this.backgroundWidth * scale;\n        var backgroundHeight = this.backgroundHeight * scale;\n      } else {\n        backgroundSize = backgroundSize.split(' ');\n        var backgroundWidth = backgroundSize[0] || '';\n        var backgroundHeight = backgroundSize[1] || backgroundWidth;\n\n        if (isPercentage(backgroundWidth)) {\n          backgroundWidth = container.width * parseFloat(backgroundWidth) / 100;\n        } else if (backgroundWidth != 'auto') {\n          backgroundWidth = parseFloat(backgroundWidth);\n        }\n\n        if (isPercentage(backgroundHeight)) {\n          backgroundHeight = container.height * parseFloat(backgroundHeight) / 100;\n        } else if (backgroundHeight != 'auto') {\n          backgroundHeight = parseFloat(backgroundHeight);\n        }\n\n        if (backgroundWidth == 'auto' && backgroundHeight == 'auto') {\n          backgroundWidth = this.backgroundWidth;\n          backgroundHeight = this.backgroundHeight;\n        } else {\n          if (backgroundWidth == 'auto') {\n            backgroundWidth = this.backgroundWidth * (backgroundHeight / this.backgroundHeight);\n          }\n\n          if (backgroundHeight == 'auto') {\n            backgroundHeight = this.backgroundHeight * (backgroundWidth / this.backgroundWidth);\n          }\n        }\n      } // Compute backgroundX and backgroundY in page coordinates\n\n\n      var backgroundX = backgroundPosition[0];\n      var backgroundY = backgroundPosition[1];\n\n      if (isPercentage(backgroundX)) {\n        backgroundX = container.left + (container.width - backgroundWidth) * parseFloat(backgroundX) / 100;\n      } else {\n        backgroundX = container.left + parseFloat(backgroundX);\n      }\n\n      if (isPercentage(backgroundY)) {\n        backgroundY = container.top + (container.height - backgroundHeight) * parseFloat(backgroundY) / 100;\n      } else {\n        backgroundY = container.top + parseFloat(backgroundY);\n      }\n\n      var elementOffset = this.$el.offset();\n      this.renderProgram.uniforms.topLeft = new Float32Array([(elementOffset.left - backgroundX) / backgroundWidth, (elementOffset.top - backgroundY) / backgroundHeight]);\n      this.renderProgram.uniforms.bottomRight = new Float32Array([this.renderProgram.uniforms.topLeft[0] + this.$el.innerWidth() / backgroundWidth, this.renderProgram.uniforms.topLeft[1] + this.$el.innerHeight() / backgroundHeight]);\n      var maxSide = Math.max(this.canvas.width, this.canvas.height);\n      this.renderProgram.uniforms.containerRatio = new Float32Array([this.canvas.width / maxSide, this.canvas.height / maxSide]);\n    },\n    initShaders: function initShaders() {\n      var vertexShader = ['attribute vec2 vertex;', 'varying vec2 coord;', 'void main() {', 'coord = vertex * 0.5 + 0.5;', 'gl_Position = vec4(vertex, 0.0, 1.0);', '}'].join('\\n');\n      this.dropProgram = createProgram(vertexShader, ['precision highp float;', 'const float PI = 3.141592653589793;', 'uniform sampler2D texture;', 'uniform vec2 center;', 'uniform float radius;', 'uniform float strength;', 'varying vec2 coord;', 'void main() {', 'vec4 info = texture2D(texture, coord);', 'float drop = max(0.0, 1.0 - length(center * 0.5 + 0.5 - coord) / radius);', 'drop = 0.5 - cos(drop * PI) * 0.5;', 'info.r += drop * strength;', 'gl_FragColor = info;', '}'].join('\\n'));\n      this.updateProgram = createProgram(vertexShader, ['precision highp float;', 'uniform sampler2D texture;', 'uniform vec2 delta;', 'varying vec2 coord;', 'void main() {', 'vec4 info = texture2D(texture, coord);', 'vec2 dx = vec2(delta.x, 0.0);', 'vec2 dy = vec2(0.0, delta.y);', 'float average = (', 'texture2D(texture, coord - dx).r +', 'texture2D(texture, coord - dy).r +', 'texture2D(texture, coord + dx).r +', 'texture2D(texture, coord + dy).r', ') * 0.25;', 'info.g += (average - info.r) * 2.0;', 'info.g *= 0.995;', 'info.r += info.g;', 'gl_FragColor = info;', '}'].join('\\n'));\n      gl.uniform2fv(this.updateProgram.locations.delta, this.textureDelta);\n      this.renderProgram = createProgram(['precision highp float;', 'attribute vec2 vertex;', 'uniform vec2 topLeft;', 'uniform vec2 bottomRight;', 'uniform vec2 containerRatio;', 'varying vec2 ripplesCoord;', 'varying vec2 backgroundCoord;', 'void main() {', 'backgroundCoord = mix(topLeft, bottomRight, vertex * 0.5 + 0.5);', 'backgroundCoord.y = 1.0 - backgroundCoord.y;', 'ripplesCoord = vec2(vertex.x, -vertex.y) * containerRatio * 0.5 + 0.5;', 'gl_Position = vec4(vertex.x, -vertex.y, 0.0, 1.0);', '}'].join('\\n'), ['precision highp float;', 'uniform sampler2D samplerBackground;', 'uniform sampler2D samplerRipples;', 'uniform vec2 delta;', 'uniform float perturbance;', 'varying vec2 ripplesCoord;', 'varying vec2 backgroundCoord;', 'void main() {', 'float height = texture2D(samplerRipples, ripplesCoord).r;', 'float heightX = texture2D(samplerRipples, vec2(ripplesCoord.x + delta.x, ripplesCoord.y)).r;', 'float heightY = texture2D(samplerRipples, vec2(ripplesCoord.x, ripplesCoord.y + delta.y)).r;', 'vec3 dx = vec3(delta.x, heightX - height, 0.0);', 'vec3 dy = vec3(0.0, heightY - height, delta.y);', 'vec2 offset = -normalize(cross(dy, dx)).xz;', 'float specular = pow(max(0.0, dot(offset, normalize(vec2(-0.6, 1.0)))), 4.0);', 'gl_FragColor = texture2D(samplerBackground, backgroundCoord + offset * perturbance) + specular;', '}'].join('\\n'));\n      gl.uniform2fv(this.renderProgram.locations.delta, this.textureDelta);\n    },\n    initTexture: function initTexture() {\n      this.backgroundTexture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, this.backgroundTexture);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    },\n    setTransparentTexture: function setTransparentTexture() {\n      gl.bindTexture(gl.TEXTURE_2D, this.backgroundTexture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, transparentPixels);\n    },\n    hideCssBackground: function hideCssBackground() {\n      // Check whether we're changing inline CSS or overriding a global CSS rule.\n      var inlineCss = this.$el[0].style.backgroundImage;\n\n      if (inlineCss == 'none') {\n        return;\n      }\n\n      this.originalInlineCss = inlineCss;\n      this.originalCssBackgroundImage = this.$el.css('backgroundImage');\n      this.$el.css('backgroundImage', 'none');\n    },\n    restoreCssBackground: function restoreCssBackground() {\n      // Restore background by either changing the inline CSS rule to what it was, or\n      // simply remove the inline CSS rule if it never was inlined.\n      this.$el.css('backgroundImage', this.originalInlineCss || '');\n    },\n    dropAtPointer: function dropAtPointer(pointer, radius, strength) {\n      var borderLeft = parseInt(this.$el.css('border-left-width')) || 0,\n          borderTop = parseInt(this.$el.css('border-top-width')) || 0;\n      this.drop(pointer.pageX - this.$el.offset().left - borderLeft, pointer.pageY - this.$el.offset().top - borderTop, radius, strength);\n    },\n\n    /**\r\n     *  Public methods\r\n     */\n    drop: function drop(x, y, radius, strength) {\n      gl = this.context;\n      var elWidth = this.$el.innerWidth();\n      var elHeight = this.$el.innerHeight();\n      var longestSide = Math.max(elWidth, elHeight);\n      radius = radius / longestSide;\n      var dropPosition = new Float32Array([(2 * x - elWidth) / longestSide, (elHeight - 2 * y) / longestSide]);\n      gl.viewport(0, 0, this.resolution, this.resolution);\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffers[this.bufferWriteIndex]);\n      bindTexture(this.textures[this.bufferReadIndex]);\n      gl.useProgram(this.dropProgram.id);\n      gl.uniform2fv(this.dropProgram.locations.center, dropPosition);\n      gl.uniform1f(this.dropProgram.locations.radius, radius);\n      gl.uniform1f(this.dropProgram.locations.strength, strength);\n      this.drawQuad();\n      this.swapBufferIndices();\n    },\n    updateSize: function updateSize() {\n      var newWidth = this.$el.innerWidth(),\n          newHeight = this.$el.innerHeight();\n\n      if (newWidth != this.canvas.width || newHeight != this.canvas.height) {\n        this.canvas.width = newWidth;\n        this.canvas.height = newHeight;\n      }\n    },\n    destroy: function destroy() {\n      this.$el.off('.ripples').removeClass('jquery-ripples').removeData('ripples');\n      this.$canvas.remove();\n      this.restoreCssBackground();\n      this.destroyed = true;\n    },\n    show: function show() {\n      this.visible = true;\n      this.$canvas.show();\n      this.hideCssBackground();\n    },\n    hide: function hide() {\n      this.visible = false;\n      this.$canvas.hide();\n      this.restoreCssBackground();\n    },\n    pause: function pause() {\n      this.running = false;\n    },\n    play: function play() {\n      this.running = true;\n    },\n    set: function set(property, value) {\n      switch (property) {\n        case 'dropRadius':\n        case 'perturbance':\n        case 'interactive':\n        case 'crossOrigin':\n          this[property] = value;\n          break;\n\n        case 'imageUrl':\n          this.imageUrl = value;\n          this.loadImage();\n          break;\n      }\n    }\n  }; // RIPPLES PLUGIN DEFINITION\n  // ==========================\n\n  var old = $.fn.ripples;\n\n  $.fn.ripples = function (option) {\n    if (!config) {\n      throw new Error('Your browser does not support WebGL, the OES_texture_float extension or rendering to floating point textures.');\n    }\n\n    var args = arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : undefined;\n    return this.each(function () {\n      var $this = $(this),\n          data = $this.data('ripples'),\n          options = $.extend({}, Ripples.DEFAULTS, $this.data(), typeof option == 'object' && option);\n\n      if (!data && typeof option == 'string') {\n        return;\n      }\n\n      if (!data) {\n        $this.data('ripples', data = new Ripples(this, options));\n      } else if (typeof option == 'string') {\n        Ripples.prototype[option].apply(data, args);\n      }\n    });\n  };\n\n  $.fn.ripples.Constructor = Ripples; // RIPPLES NO CONFLICT\n  // ====================\n\n  $.fn.ripples.noConflict = function () {\n    $.fn.ripples = old;\n    return this;\n  };\n});","map":null,"metadata":{},"sourceType":"script"}